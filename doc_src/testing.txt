<!--VARIABLES {"title": "Тестирование", "SORT_ORDER": "30"}-->
[TOC]

----------------------------------------------------------------------------------------------------  
# Тестирование

**Тестирование программного обеспечения** (Software Testing) - проверка соответствия между реальным 
и ожидаемым поведением программы, осуществляемая на конечном наборе тестов, выбранном определенным 
образом.

**Верификация** (Verification) - это процесс оценки системы или её компонентов с целью определения 
удовлетворяют ли результаты текущего этапа разработки условиям, сформированным в начале этого этапа 
[IEEE]. Т.е. выполняются ли наши цели, сроки, задачи по разработке проекта, определенные в начале текущей фазы.

Валидация (Validation) - это определение соответствия разрабатываемого ПО ожиданиям и потребностям пользователя, требованиям к системе [BS7925-1].

[Тестирование](http://www.protesting.ru/testing/) состоит из: 
<!--i ["тестирование"]-->

- Изучение и анализ предмета тестирования. Проверка работы функциональностей называется функциональ-
    ным тестированием (**functional testing**). Важность функционального тестирования состоит в том,
    что *функциональности* — это не что иное, как продукт, предоставляемый пользователям интернет-
    компанией. Основными источниками знания о функциональностях служат: 
    
- **документация** в электронном или распечатанном виде — спеки, макеты, блок-схемы и прочие 
    руководящие документы, на основании которых программист пишет код, а тестировщик планирует 
    тестирование.
    
- Здоровая дружеская атмосфера в коллективе — это отличное средство для предотвращения ошибок в 
    толковании.
    
- Сам веб-сайт, который мы изучаем посредством эксплоринга.
   **Эксплоринг** (*exploring (англ.) — "исследование", "разведка"*) — это изучение того, как 
   работает веб-сайт с точки зрения пользователя.
   
В интернет-компаниях эксплоринг, как правило, применяется в двух случаях:

- когда написан код и отсутствует документация. Подобная ситуация часто поджидает первого 
    тестировщика, приходящего в работающую интернет-компанию;
    
- для самообучения. Например, в крупных интернет-компаниях вновь нанятые тестировщики в течение 
    нескольких недель проходят тренинг, часть которого посвящена эксплорингу.
    Конечной целью этапа: изучение и анализ предмета тестирования является получение ответов на два 
    вопроса:
    
 1. *Какие функциональности предстоит протестировать*?
 
 2. *Как эти функциональности работают*?

-  Планирование тестирования. Подготовка к тестированию (**testpreparation, test preps**).

-  Исполнение тестирования (**test execution**).

Суть исполнения тестирования — это практический поиск багов в написанном коде с использованием
тест-кейсов, созданных ранее. Тестирование *новых функциональностей* (**new feature testing**) и 
соответственно *регрессивное тестирование* (**regression testing**).
Соответственно выражение "**regress that bug**" (проведи регрессивное тестирование этого бага).

Цикл тестирования ПО:

- действительно ли баг был починен. Проверка осуществляется путем исполнения шагов, которые ранее 
    привели к багу, или, в профессиональной терминологии, путем генерации ввода, который привел к выводу,
    не соответствующему ожидаемому результату;

- не появились ли новые баги как нечаянное следствие изменения кода при починке. Проверка 
    осуществляется путем тестирования функциональностей, работа которых могла быть затронута починкой.

## План Тестирования 

**План Тестирования**(Test Plan) - это документ, описывающий весь объем работ по тестированию, 
начиная с описания объекта, стратегии, расписания, критериев начала и окончания тестирования, до 
необходимого в процессе работы оборудования, специальных знаний, а также оценки рисков с вариантами 
их разрешения.

Хороший тест план должен как минимум описывать следующее:

- Что надо тестировать? Описание объекта тестирования: системы, приложения, оборудования.

- Что будете тестировать? Список функций и описание тестируемой системы и её компонент в отдельности.

- Как будете тестировать? Стратегия тестирования, а именно: виды тестирования и их применение по 
    отношению к объекту тестирования.
    
- Когда будете тестировать? Последовательность проведения работ: подготовка (Test Preparation), 
    тестирование (Testing), анализ результатов (Test Result Analisys) в разрезе запланированных фаз 
    разработки.
    
- Критерии начала тестирования: готовность тестовой платформы (тестового стенда)законченность 
    разработки требуемого функционала наличие всей необходимой документации.
    
- Критерии окончания тестирования: результаты тестирования удовлетворяют критериям качества продукта:
    
    - требования к количеству открытых багов выполнены  
    - выдержка определенного периода без изменения исходного кода приложения Code Freeze (CF)   
    - выдержка определенного периода без открытия новых багов Zero Bug Bounce (ZBB)

Ответив в своем тест плане на вышеперечисленные вопросы, можно считать, что у вас на руках уже есть 
хороший черновик документа по планированию тестирования. Далее, чтобы документ приобрел более менее 
серьезный вид, предлагаем дополнить его следующими пунктами:

- Окружение тестируемой системы (описание программно-аппаратных средств)    
- Необходимое для тестирования оборудование и программные средства (тестовый стенд и его конфигурация, 
  программы для автоматизированного тестирования и т.д.)
- Риски и пути их разрешения    

### Виды тест планов   

- **Мастер Тест План** (Master Plan or Master Test Plan)
- **Тест План** (Test Plan), назовем его детальный тест план)
- **План Приемочных Испытаний** (Product Acceptance Plan) - документ, описывающий набор действий, 
    связанных с приемочным тестированием (стратегия, дата проведения, ответственные работники и т.д.) 
    (Шаблон плана приемо-сдаточных испытаний от RUP)

Явное отличие **Мастер Тест Плана** от просто **Тест Плана** в том, что мастер тест план является более 
статичным в силу того, что содержит в себе высокоуровневую (High Level) информацию, которая не 
подвержена частому изменению в процессе тестирования и пересмотра требований. Сам же детальный тест 
план, который содержит более конкретную информацию по стратегии, видам тестировании, расписанию 
выполнения работ, является "живым" документом, который постоянно претерпевает изменения, отражающие 
реальное положение дел на проекте.

### Рецензия и Утверждение

Для увеличения ценности вашего тест плана рекомендуется проводить его периодическое рецензирование 
со стороны участников проектной группы. Это можно сделать просто договорившись между собой или же 
реализовать в виде "процедуры утверждения". Как пример, приведем список участников проектной группы, 
утверждение которых мы считаем необходимым:

- Ведущий тестировщик
- Тест менеджер (менеджер по качеству)
- Руководитель разработки
- Менеджер Проекта

[см.здесь](http://www.protesting.ru/testing/types/loadtesttypes.html)

## Основные пункты Тест Плана:

В стандарте IEEE 829 перечислены пункты, из которых должен состоять тест-план:

- Идентификатор тест плана (Test plan identifier);
- Введение (Introduction);
- Объект тестирования (Test items) --- общие функциональные возможности (Смоуг);
- Функции, которые будут протестированы (Features to be tested;), 
  подробный список функций и время для проверки (estimate --- оценка времени);    
- Функции, которые не будут протестированы (Features not to be tested);
- Тестовые подходы (Approach);
- Критерии прохождения тестирования (Item pass/fail criteria); законченная справочная документация,
  спец данные и требование к продукту; все запланированные тесты проведены, все баги найдены и исправлены
  и отмечены, сделаны уведомления и все точки отказа задокументированы (баг - репорты).
- Критерии приостановления и возобновления тестирования (Suspension criteria and resumption
  requirements); 
- Результаты тестирования (Test deliverables); ведение документов о проведенной работе (кол-во тестов,
  кол-во найденных багов, подробное описание)
- Задачи тестирования (Testing tasks);
- Ресурсы системы (Environmental needs);на каких системах тестируем, браузеры, окружение
- Обязанности (Responsibilities);
- Роли и ответственность (Staffing and training needs);
- Расписание (Schedule);
- Оценка рисков (Risks and contingencies);
- Согласования (Approvals).


----------------------------------------------------------------------------------------------------
<!--i ["протокол НТТР"]-->
# Протокол HTTP

Перед рассмотрением протокола HTTP будет полезно рассмотреть сопутствующие понятия.
    
Текст можно рассматривать как последовательность символов. Гипертекст --- это текст, который также 
содержит ссылки на другие тексты, а также конкретные места в других текстах и самом себе. Таким 
образом совокупность гипертекстов может образовывать сетевую структуру (граф). 

Пожалуй самым распространенным форматом гипертекста является формат HTML.

<!--i ["HTML"]-->
**HTML** (анг. `HyperText Markup Language` — язык гипертекстовой разметки страницы). Язык HTML 
позволяет определить разметку 
структуру (абзацы, заголовки, таблицы, картинки) документа. Отдельные технологии, CSS и JavaScript,
позволяет детально определить внешний вид документа и его поведение.

Документы в формате HTML часто называются *страницами* или *веб-страницами*.

Для использования HTML документов был разработан комплекс клиентского и серверного ПО. К клиентскому
ПО относятся браузеры, специализированные клиенты типа Postman и `curl`. Серверное ПО включает 
многочисленные серверы приложений, написанные на различных языках программирования. 

Взаимодействие клиентов и серверов осуществляется по протоколу HTTP:

- потребителей (клиентов), которые инициируют соединение и посылают запрос;
- поставщиков (серверов), которые ожидают соединения для получения запроса, производят необходимые 
    действия и возвращают обратно сообщение с результатом.

[HTTP](https://ru.wikipedia.org/wiki/HTTP#%D0%A1%D1%82%D0%B0%D1%80%D1%82%D0%BE%D0%B2%D0%B0%D1%8F_%D1%81%D1%82%D1%80%D0%BE%D0%BA%D0%B0)
<!--i ["HTTP", "гипертекст"]-->
**HTTP** (англ. HyperText Transfer Protocol — «протокол передачи гипертекста») — протокол прикладного
уровня передачи данных, изначально — в виде гипертекстовых документов в формате HTML, в 
настоящее время используется для передачи произвольных данных.


## HTTP Request

*Request* --- это данные которые мы отправляем в запросе. Request состоит из следующих частей:

- Стартовая строка в которой указывается: 1. Протокол/Версия протокола 2. Метод запроса 3. URI
- Request headers - заголовки со служебной, уточняющей, дополнительной информацией, в формате 
    "ключ: значение"
- Request body - тело запроса, в котором мы передаем необходимые данные для внесения изменений 
    (например, в БД).

## URL

**URL** --- унифицированный указатель ресурса (англ. Uniform Resource Locator, сокр. URL) ---
система унифицированных адресов электронных ресурсов, или единообразный определитель местонахождения 
ресурса.


----------------------------------------------------------------------------------------------------
<!--i ["QC"]-->
# QC

1. Testing (тестирование) — самый первый уровень. Это проверка программного продукта на соответствие
требованиям этого продукта. 
2. QC (Quality Control, контроль качества) — второй уровень, включает в себя тестирование и контроль
 за соответствием заранее согласованному уровню качества продукта и готовность к выпуску продукта в 
 продакшн.

Основная задача контроля качества — предоставить объективную картину того, что происходит с качеством 
продукта на разных этапах разработки. Управление качеством (Quality control) — часть менеджмента 
качества, направленная на выполнение требований к качеству. Это означает, что необходимо выполнять 
требования, а как это будет происходить, зависит от корпоративной культуры.

----------------------------------------------------------------------------------------------------
# QA

<!--i ["QA"]-->
QA (Quality Assurance, обеспечение качества) — часть обеспечения согласованного уровня качества 
продукта. Это уже проактивная работа, т.к. основная задача обеспечения качества — это выстроить 
систему, которая будет работать на качество продукта, чтобы при тестировании количество дефектов было
минимальным. 
В зависимости от специфики проекта сюда может входить тестирование документации, ревью кода на 
соответствие стандартам, внедрение каких-то методик по работе с качеством. 
Обеспечение качества (Quality Assurance) — часть менеджмента качества, направленная на создание 
уверенности, что требования к качеству будут выполнены.
При более полном понимании можно обратиться к ГОСТ Р ИСО 9000-2015

QA engineer, QC специалист или тестировщик —  это все одна вакансия или все три разные? На какие 
вакансии откликаться, я же учусь на тестировщика. 

На сайтах по поиску работы можно увидеть следующие вакансии:
 
QA engineer, QC специалист или тестировщик —  это все одна вакансия или все три разные? На какие 
вакансии откликаться, я же учусь на тестировщика. 
В описании работы чаще всего будут обязанности тестировщика и не будет ни слова об улучшении качества. 

Эта путаница началась уже давно, найти и искоренить ее истоки невозможно, поэтому смело можно 
отправлять свое резюме и на QA, и на тестировщика, и даже на QC (если найдете такую вакансию, 
связанную со сферой ИТ), главное, чтобы ваши знания и навыки отвечали перечисленным в ней обязанностям. 

1. Тестирование не может доказать отсутствие багов(только их наличие);
1. Исчерпывающее тестирование невозможно по определению;
1. Раннее тестирование позволяет сэкономить ресурсы;
1. Парадокс пестицидов;
1. Кластеризация багов;
1. Тестирование зависит от контекста;
1. Заблуждение об отсутствии багов;

----------------------------------------------------------------------------------------------------
<!--i ["жизненный цикл"]-->
# Жизненный цикл

Жизненный цикл ПО (SDLC) – это период времени, который начинается с возникновения идеи продукта до 
прекращения его использования —  вывода из эксплуатации.

Жизненный цикл программного обеспечения состоит из последовательных этапов:

- Анализ требований. На этом этапе составляется ТЗ(Техническое задание – это документ, содержащий
- информацию для постановки задач на разработку), обозначаются сроки по каждой задаче и план работ. 
- Здесь также нужно учитывать все возможные риски. Как только все детали просчитаны и описаны – можно
- переходить к следующему этапу;
- Дизайн системы. Разрабатывается прототип, дизайн-макет, платформа для программирования. Все члены 
- команды должны быть расписаны по ролям, а также необходимо указать их обязанности;
- Разработка. Команда пишет код продукта, согласно требованиям технического задания;
- Тестирование. Проверка продукта, когда код написан. Если все благополучно, работу можно считать 
- практически законченной;
- Техническая поддержка. После релиза продукта, команда разработки поддерживает работу проекта на 
- стабильном уровне, собирая обратную связь от пользователей и устраняя баги, если они возникают.

---------------------------------------------------------------------------------------------------
# Waterfall

`Waterfall` —  водопадная/каскадная модель разработки, описанная в 1970 году, дублирует этапы 
жизненного цикла ПО. Waterfall позволяет решать задачи по последовательному плану без возврата на 
предыдущие этапы.

Принципы Waterfall:

Следуйте правилам:

1. Нет ТЗ — нет продукта; 
1. Чем подробнее ТЗ, тем лучше продукт; 
1. Следите, чтобы не было изменений.

По мере развития и распространения ПО, нужно было максимально погружаться в проект, чтобы 
контролировать изменения, взаимодействовать с командой, предлагать новые решения. В рамках Waterfall
это было невозможно, так как водопадная модель разработки не была гибкой. Именно в этот момент и 
появился `Agile`.

*Agile* — это группа методик для гибкого управления продуктом. Суть этой группы методик заключается 
в разбивке процесса на небольшие временные промежутки — спринты. Во время каждого спринта команда 
разработки создает часть продукта, которую можно протестировать. Такой подход позволяет вносить 
правки на любом этапе. 

В Agile работа над продуктом строится по следующей логике:

- составление ТЗ; 
- проектирование; 
- разработка; 
- тестирование;
- результат.

В разработке любого `софта` есть два подхода: *итеративный и непрерывный*. Они отличаются методами 
работы и сложностью организации.
Непрерывный подход позволяет пользователям каждый день получать новую версию, которую уже можно 
использовать.

*Непрерывный* подход является самым популярным, на сегодняшний день. Его описывает концепция CI/CD 
`(Continuous Integration`, `Continuous Delivery` — непрерывная интеграция и доставка) — это 
автоматизация тестирования и доставки новых модулей ПО конечным пользователям. CI/CD относится к 
`Agile-методологиям`.

В рамках непрерывного подхода решаются следующие задачи: 

- автоматизация последовательной сборки, упаковки и тестирования ПО; 
- автоматизация развертывания ПО в различных окружениях; 
- минимизация ошибок и уязвимостей ПО.

СI/CD – это современная аналогия конвейерного производства. Их объединяет четкое распределение труда,
непрерывный поток работы и параллельное выполнение сразу нескольких задач.

CI/CD чаще всего зависит от тестировщиков и девопсов:

- Тестировщики следят за тем, что новые изменения не повлияли на качество продукта; 
- Девопсы автоматизируют процесс доставки ПО. 
- Благодаря CI/CD пользователи получают новые фичи сразу, а команда разработки получает страховку от
    возможных сбоев при сборке ПО.

----------------------------------------------------------------------------------------------------
<!--i ["мониторинг и контроль"]-->
# Мониторинг и контроль

Стандарт *ISO/IEC/IEEE 29119-3* выделяет два вида отчетов: *отчет о ходе тестирования* и *отчет о 
завершении тестирования*. Форма и содержание отчетов могут сильно отличаться от проекта к проекту, а 
также в зависимости от целей, которые преследуют конкретные отчеты, и аудитории, для которой они 
составляются. 

Например, для сложных, формальных проектов с большим числом заинтересованных лиц может потребоваться
более подробная и строгая отчетность. В гибкой разработке отчеты о ходе тестирования могут быть 
частью обсуждения на ежедневных встречах, поэтому составляются в автоматическом или 
полуавтоматическом режиме (например, путем выгрузки списка задач, по которым велись работы, из 
баг-трекера).

Мониторинг и контроль тестирования это в первую очередь задача руководства. Для рядового же 
сотрудника (как правило) данный этап заканчивается на выполнении регламентированных рутинных 
действий по ежедневному заполнению форм, если они не заполняются автоматически по мере его работы.

----------------------------------------------------------------------------------------------------
<!--i ["анализ"]-->
# Анализ
  
Итак, на этапе анализа мы анализируем тестовый базис, собранный на этапе планирования. Напомним, что
тестовым базисом у нас называются описывающие будущий продукт требования и дизайн. 
Анализировать их можно с двух сторон:

- Анализ базиса на наличие ошибок. Все документы, входящие в базис, тоже можно тестировать и 
 выявлять такие баги, как неточность, неоднозначность, противоречивость, избыточность и т.д. Например,
 если на макете главной страницы кнопка «личный кабинет» расположена в десяти разных местах, это 
 вполне может быть поводом уточнить, не стоит ли сократить это количество хотя бы до 9. Или 
 требование нарисовать 7 перпендикулярных линий.
- Анализ базиса с целью выявления тестовых условий. Под тестовыми условиями понимается конкретное 
 утверждение, которое можно проверить. Например, «кнопка должна быть красивенькая» — не тестовое 
 условие, а «кнопка должна быть 20х40, цвета FF0000, с надписью цвета FFFFFF «Старт» шрифтом Times 
 new roman размера 9,5» — целый набор тестовых условий.

----------------------------------------------------------------------------------------------------
# Проектирование

<!--i ["проектирование"]-->
Мы будем писать высокоуровневые тест-кейсы на основании тестовых условий. Для начала очень кратко 
разберем, что такое тест-кейс (подробно о тест-кейсах поговорим в модуле 3). Тест-кейс, он же 
тестовый сценарий, представляет из себя описание последовательности конкретных шагов (действий), 
которые следует пройти для проверки какой-либо функциональности. Как правило, для каждого шага 
прописывается ожидаемый результат, т.е. что должно произойти при выполнении действия, например:

- Нажать ЛКМ на иконку корзины в правой верхней части страницы — Страница корзины открыта.

На практике тест-кейсы обычно длиннее. Например, открыть каталог, добавить товар в корзину, потом 
перейти в нее и убедиться, что товар добавился — уже вполне себе тест-кейс «Проверка добавления 
товара в корзину». 

*Высокоуровневый* тест-кейс характеризуется отсутствием привязки к конкретным 
данным — то есть мы не указываем какой именно товар из какого раздела каталога должен быть добавлен.
Или, скажем, при проверке авторизации пишем «ввести корректный логин и пароль» вместо указания 
конкретных логина и пароля.

Тест-кейсы пишутся на основании тестовых условий. Вспомним нашу кнопку (которая «Старт», а не 
которая красивенькая), нам потребуется проверить ее цвета, надпись и шрифт. Так как тест-кейсы у нас 
высокоуровневые, мы просто укажем что ее параметры корректны, «соответствуют макету» (предположим, 
что мы взяли их с макета). В такой формулировке тест-кейс можно будет применить не только к 
конкретно этой кнопке, а вообще ко всем кнопкам, изображенным на макете (т.е. вообще ко всем кнопкам 
нашего продукта, т.к. макет должен отображать итоговый вид).

----------------------------------------------------------------------------------------------------
<!--i ["реализация"]-->
# Реализация (*implementation*) -- «снабжение инструментами».

Инструментами в нашем случае являются, например, все необходимые для тестирования вспомогательные 
программы. *Баг-трекер*, в котором будут описываться все найденные баги и отслеживаться прогресс их 
исправления. Сначала баг-трекер необходимо выбрать, затем оплатить его использование, после чего 
создать нужное количество учетных записей для всех, кто будет участвовать в процессе разработки. 

Также понадобится настроить *баг-трекер* —  уже упомянутая ранее Jira позволяет очень гибко 
*кастомизировать (to customize — настраивать, изменять)* набор полей, которые будут использоваться в
ходе работы.

Нельзя забывать о настройке стендов для тестировщиков, разработчиков, для других заинтересованных 
(менеджмента, инвесторов).

То есть, если нашим продуктом является сайт *bestshop.org*, то по адресу *test-bestshop.org* может 
располагаться стенд для тестировщиков, *dev-bestshop.org* —  стенд разработчиков, а 
*manage-bestshop.org* —  стенд для менеджмента. 
Также на этом этапе подготавливаются тестовые данные, в отрыве от которых пишутся высокоуровневые 
тест-кейсы. Тест-кейсы могут укладываться в последовательности в рамках этого этапа (логично сначала 
протестировать авторизацию, а потом личный кабинет — можно сэкономить немного времени).

----------------------------------------------------------------------------------------------------
<!--i ["выполнение"]-->
# Выполнение

У нас есть набор действий, ожидаемый результат которых заранее известен (тест-кейсы). Мы производим 
эти действия, отслеживая получаемый результат. Если полученный результат не совпал с ожидаемым, на 
это пишется баг-репорт, который уходит разработчикам. Результат каждого прохождения тест-кейсов 
(pass/fail) документируется на протяжении всего времени существования проекта.
Функциональность протестирована, тест-кейсы пройдены, баг-репорты написаны. Приезжает новая версия, 
в которой исправлены баги предыдущей плюс добавлен новый функционал — вместо заглушки теперь 
показывается главная страница, только на ней ничего не работает (это прикрутят уже в следующей версии).

И вот важный момент, каковы наши действия:

- проверяем, исправлены ли баги предыдущей версии (те, которые разработчики пометили как 
    исправленные и передали нам), в зависимости от результата переводим их в статус исправленных или 
    возвращаем разработке на исправление;
- проводим тестирование нового функционала, проходим тест-кейсы, пишем баг-репорты;
    проводим полное тестирование оставшегося функционала (это называется *регрессионное* тестирование 
    или сокращенно *регресс*), чтобы убедиться, что исправление *багов* и добавление новых *фич8 его 
    не сломало;
- в ожидании новой версии работаем с документацией, т.е. проверяем актуальность имеющихся 
    тест-кейсов, пишем новые, считаем метрики и т.д.;

## Завершение

Это этап подведения итогов, учета возникших проблем и разработки способов их избежать в будущем.
Вещественно этап воплощается в отчетах о проведенных проверках и их результатах, а также в 
изменениях в работе команды. снова вспомнив принцип трассируемости в процессе тестирования. Возьмем 
отчет, в котором прописано, что баг А был обнаружен при прохождении тест-кейса Б, который в 
последней на данный момент версии продукта был пройден успешно. Тест-кейс Б был написан на основании 
тестового условия C, выделенного из пункта D документа E, представляющего собой список требований, 
выявленных аналитиком Ивановым при общении с заказчиком. 

Этот принцип -- «принцип двунаправленной трассируемости», ведь при его соблюдении мы можем проследить 
путь как от требования к результату в конечном продукте, так и от конечного продукта к конкретному 
требованию. 

----------------------------------------------------------------------------------------------------
<!--i ["Charles Proxy"]--> 
# Charles Proxy

Charles Proxy — это ПО для сниффинга трафика с устройства.

**Сниффинг** — процесс мониторинга и перехвата всех пакетов, проходящих через сеть, с помощью 
инструментов сниффинга (`Charles Proxy`).
Теперь разберем шаги, это очень важно.

Первые шаги:

- Устанавливаем и запускаем `Charles Proxy`.
- Переходим в раздел `Help > SSL Proxying > Install Charles Root Certificate`.
- В открывшемся окне Сертификат > Установить сертификат. Выбрать «Текущий пользователь» или 
    «Локальный пользователь». Далее вы получите уведомление, что сертификат успешно импортирован.

## Настройка прокси на Android

Чтобы отображались запросы приложения Android, у вас должна стоять соответствующая сборка Android-
приложения c установленным в манифесте разрешением.

*Важно*: устройство Android и десктоп должны быть в одной сети.

Для этого узнаем IP-адрес ПК: в Charles Proxy перейдем в Help > Local IP Address. 

Видим, что наш IP: 192.168.60.159 
Далее на телефоне идем в `Свойства сети` → Название сети WiFi → Прокси-сервер

Выбираем вариант вручную и прописываем параметры:

Имя хоста: `Наш IP`;
Порт: 8888

При сохранении в charles на ПК появится запрос, нажимаем Allow.
Теперь необходимо на телефоне перейти по ссылке chls.pro/ssl, начнется скачивание сертификата. 
После успешной загрузки перейти в настройки, найти пункт установка сертификата, нам нужен Сертификат СА.

Выбираем скаченный сертификат и устанавливаем.

Все! Ваш телефон готов для сниффинга.

В окне Charles будут видны запросы отправляемые с вашего устройства, которые можно фильтровать.



[QA Библия](https://vladislaveremeev.gitbook.io/qa_bible/)

[Энциклопедия джуна](https://github.com/Kakha-Khinikadze/Links-QA/blob/master/Links.md)

[Подборка площадок](https://xn--90aexm.xn--b1agwec.xn--p1ai/2020/01/testovye-ploschadki-dlya-trenirovok/)
чтобы подтянуть теорию и потренить навыки () 

[Огромный список ресурсов](https://artsiomrusau.com/articles/), который будет интересен джунам и 
опытным спецам. Гайды, чек-листы — чего только нет, если порыться. Полезного достаточно. Советую 
присмотреться к тренажёрам.

[Шпаргалки по SQL](https://tproger.ru/articles/shpargalki-po-sql/) все под рукой, что может 
пригодиться в работе с реляционными базами данных: ключевые слова, комментарии, операторы, джойны.

[задачки на логику](https://telegra.ph/Samaya-interesnaya-chast-sobesedovaniya-testirovshchika-zadachi-na-logiku-07-13)

```shell
>py
Python 3.10.7 (tags/v3.10.7:6cc6b13, Sep  5 2022, 14:08:36) [MSC v.1933 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
2+2
4
>
```


<!--i ["отчёт о результатах тестирования", "test progress report"]--> 
## Отчёт о результатах тестирования

Отчёт о результатах тестирования (test progress report, test summary report) — документ, обобщающий 
результаты работ по тестированию и содержащий информацию,
достаточную для соотнесения текущей ситуации с тестпланом и принятия необходимых управленческих
решений.

### Структура отчета о результатах тестирования

- Краткое описание (summary). В предельно краткой форме отражает основные достижения, проблемы, 
    выводы и рекомендации. В идеальном случае прочтения краткого описания может быть достаточно для
    формирования полноценного представления о происходящем, что избавит от необходимости читать 
    весь отчёт (это важно, т.к. отчёт о результатах тестирования может попадать в руки очень занятым людям).
- Команда тестировщиков (test team). Список участников проектной команды, задействованных в 
    обеспечении качества, с указанием их должностей и ролей в подотчётный период.
- Описание процесса тестирования (testing process description). Последовательное описание того, 
    какие работы были выполнены за подотчётный период.
- Расписание (timetable). Детализированное расписание работы команды тестировщиков и/или личные 
    расписания участников команды.
- Статистика по новым дефектам (new defects statistics). Таблица, в которой представлены данные по 
    обнаруженным за подотчётный период дефектам (с классификацией по стадии жизненного цикла и важности).
   (**testrail** ПОМОЖЕТ сделать отчет диаграммами и схемами)
- Список новых дефектов (new defects list). Список обнаруженных за подотчётный период дефектах с их
    краткими описаниями и важностью.
- Статистика по всем дефектам (overall defects statistics). Таблица, в которой представлены данные 
    по обнаруженным за всё время существования проекта дефектам (с классификацией по стадии
    жизненного цикла и важности). Как правило, в этот же раздел добавляется график, отражающий 
    такие статистические данные.
- Рекомендации (recommendations). Обоснованные выводы и рекомендации по принятию тех или иных 
    управленческих решений (изменению тест-плана, запросу или освобождению ресурсов и т.д.)
    Здесь этой информации можно отвести больше места, чем в кратком описании (summary), сделав 
    акцент именно на том, что и почему рекомендуется сделать в имеющейся ситуации.
- Приложения (appendixes). Фактические данные (как правило, значения метрик и графическое 
    представление их изменения во времени). 

----------------------------------------------------------------------------------------------------
# Вопросы для собеседования 

На тестирование по профессии Тестировщик могут задаваться различные вопросы, в зависимости от 
конкретной должности и компании. Некоторые примеры вопросов, которые могут задаваться на 
тестирование по профессии Тестировщик, включают:

Какие принципы тестирования вы знаете и как вы применяете их в своей работе?
Какие типы тестов вы знаете и в каких ситуациях их используете?
Как вы планируете и организуете тестирование ПО?
Какие инструменты и методологии вы используете для тестирования ПО?
Как вы анализируете тестовые результаты и какие действия предпринимаете в случае выявления ошибок и 
дефектов?
Какие проблемы и трудности вы встречали в своей работе и как вы справлялись с ними?
Какие навыки и умения вы с