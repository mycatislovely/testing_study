<!--VARIABLES {"title": "Артифакты", "SORT_ORDER": "32"}-->
[TOC]

----------------------------------------------------------------------------------------------------
<!--i ["тест- кейс"]-->
#  Тест-кейс

[Тест-кейс](https://software-testing.ru/library/testing/testing-for-beginners/1991-test-case-writing)
— это документ с описанными четкими действиями, которые нужно выполнить, чтобы проверить 
какую-либо функцию продукта. Эти действия направлены на проверку того, что функция работает должным 
образом и соответствует стандартам, и требованиям клиента.
Тест-кейсы, проверяющие одну функциональность, могут быть объединены в `тест-сьюты` (тест-наборы).

Из чего состоит тест-кейс:

1. `ID` — обязательный атрибут. Это номер тест-кейса.Его используют для организации и навигации по 
всем тест-кейсам. Может создаваться как автоматически системой управления тестированием, в которой 
создается и будет храниться тест-кейс, так и вручную, если не используется такая система.
2. `Заголовок` (название) — обязательный атрибут. В заголовке отражается суть тест-кейса, то есть 
описывается что будет проверяться.
3. `Предусловия` — необязательный атрибут. Здесь указываются действия, которые необходимо выполнить 
перед выполнением основных действий тест-кейса. Эти действия не имеют прямого отношения к проверке. 
4.`Шаги` — обязательный атрибут.В этом блоке описывается последовательность действий, которые 
необходимы для проверки.Последовательность нумеруется начиная с 1. Если шаг всего один, его принято 
не нумеровать.Действия должны быть описаны понятно.
Должны использоваться безличные глаголы. Правильно: перейти, открыть, нажать.
5. `Постусловия` — необязательный атрибут.
6. `Ожидаемый результат` — обязательный атрибут. Здесь описывается результат, который ожидается 
получить в результате успешно выполненных действий из блока «Шаги». Ожидаемый результат может быть 
общим для всего тест-кейса. Но может быть и несколько, на каждый выполняемый шаг из блока «Шаги».
7. `Требования к среде` — необязательный атрибут.Тут можно указать специальное оборудование,
программное обеспечение и т.д., которое будет необходимо для прохождения данного тест-кейса. 
8. `История редактирования` — необязательный атрибут.
Краткий журнал, в котором будет указываться кто, когда и почему внес изменения в тест-кейс. 


## Инструменты для хранения тест-кейсов 

Для хранения тест-кейсов существуют системы управления тестирования (`TMS - Test Management System`).
На сегодняшний день их довольно много. Есть как полностью бесплатные, так и платные, и каждая 
система имеет свои недостатки и преимущества. 
Вот несколько известных и популярных:  

- Azure DevOps
- Test IT
- TestRail
- Qase
- Allure TestOps
- Zephyr Scale
- Zephyr Squad

Для первого знакомства с подобными системами можно попробовать создать тест-кейсы в бесплатном 
`Testlink`. Но, также можно организовать хранение тест-кейсов и в `Гугл Таблице`. Это будет менее 
удобно, но совсем бесплатно.

Недостатки:

- много копирования одинаковой информации из тест-кейса в тест-кейс. Если пишутся тест-кейсы, 
например, на одно поле, то многие шаги будут повторяться;
- сложность поддержки большого количества тест-кейсов. Например, изменение названия одной кнопки. 
Нужно будет найти все тест-кейсы где, есть старое название, и заменить его на новое. А если таких 
кнопок не одна и еще парочка полей? 
- неактуальные тест-кейсы. Если нет времени и  часть изменений не было внесено в тест-кейсы, то 
сотрудник, который уже давно на проекте, пройдет их как нужно. А вот для новичка это будет 
затруднительно. 
Для того чтобы документация помогала в работе, ее нужно поддерживать в актуальном состоянии и 
постоянно дорабатывать. Но, к сожалению, это отнимает много времени и сил. Релиз никто не отложит, 
потому что вы еще не поправили все нужные тест-кейсы или не дописали новые.


## Использование тест-кейсов

Но при наличии довольно существенных недостатков тест-кейсы в некоторых случаях буквально необходимы.

- Если тестируемый продукт жизненно важен и ошибки в нем могут привести к непоправимым последствиям. 
Например, медицина, ПО для атомных станций и т.д.:
- Если продукт очень сложный. Для того чтобы не вспоминать каждый раз как строится отчет, лучше 
зафиксировать это в тест-кейсе;
- Если у вас в команде идет постоянная ротация, то удобнее знакомить с продуктом с помощью 
прохождения тест-кейсов.


**P.S.**
1. Тест-кейсы должны быть понятными и конкретными.
Для проверки этого можно дать пройти их любому члену команды, который не знаком с продуктом.
Этими тест-кейсами в дальнейшем придется пользоваться вашим коллегам. Если тест-кейс непонятен, то 
это плохой тест-кейс, а значит его надо переписывать.

2. Девиз для написания заголовка - «Кратко, но ёмко!». Из заголовка тест-кейса должно быть понятно 
какую проверку необходимо провести, не читая последовательность в блоке «Шаги». Можно использовать 
сайт `http://bugred.ru/`. 

3. Девиз для тест-кейсов «Не доверяй, но проверяй». Для проверки необходимо подготовить тестовые 
данные, по которым можно точно сказать работает ли проверяемая функция или нет. 

----------------------------------------------------------------------------------------------------
<!--i ["чек - лист"]-->
# Чек - лист

**Чек-лист** — это список с кратким описанием того, что нужно проверить. Благодаря такому списку, 
процесс тестирования будет проходить более организованно, что уменьшает шансы что-то забыть.

В отличии от `тест-кейсов`, чек-листы используются для простых систем (например, интернет-магазин), 
где нет сложных процессов, которые необходимо документировать. Проще написать список проверок для 
нужных функций, чем писать полноценные тест-кейсы, а потом еще и поддерживать их в актуальном 
состоянии.

Чек-листы могут быть разного уровня детализации. Уровень детализации будет зависеть от сложности 
продукта, от знаний сотрудников тестируемого продукта и требований к отчетности о его статусе. 

`Чек-листы` можно составлять как «`верхнеуровневые`» проверки, которые помогут выявить в каком блоке/
разделе/направлении нужно будет двигаться для создания тест кейсов.


## Атрибуты чек-листа:

- `ID` — обязательный атрибут. Номер чек-листа. Используется для организации и навигации по всем 
чек-листам. Номер чек-листа может отражать степень детализации и может быть представлен в таком 
виде «3.2.6»;
- `Описание проверки` — обязательный атрибут. Краткое описание того, что должно быть проверено. 
Здесь так же применяется принцип краткости и информативности;
- `Пример` — необязательный атрибут. Если используются специфические данные для проверки функционала, 
здесь можно указать их;
- `Окружение` — необязательный атрибут. Указывается вся необходимая информация о сборке, устройствах, 
платформах и т.д., на которых должна проходить проверка;
- `Результат` — обязательный атрибут. Здесь описывается результат, который ожидается получить в ходе 
успешной проверки.  

Для составления хорошего чек-листа есть несколько рекомендаций.

1. Один пункт — одно действие. Один пункт чек-листа должен представлять собой одну минимальную 
полную операцию. 
2. В названиях пунктов чек-листа используйте принципы, общие для всех членов команды. 
3. Понятные и конкретные формулировки.
4. В зависимости от сложности функционала детализируйте чек-лист; 

5. Объединяйте чек-листы в таблицы. В таблицах можно добавить столбцы с дополнительными данными 
(платформа, версия продукта, сотрудник и т.п.) и статус проверки.

*Преимущества и недостатки* чек-листов.
Как и у тест-кейсов, так и у чек-листов есть свои плюсы и минусы.

Преимущества:

- проверка в одну строку легко читается и не долго пишется;
- проходить чек-листы быстрее: в тест-кейсе нужно отмечать прохождение каждого шага, а в чек-листе 
достаточно одной строки;
- статус прохождения чек-листа это источник результатов для отчета: можно быстро посчитать сколько 
проверок выполнено, и в каком они статусе, узнать количество открытых репортов;
- легко можно поменять порядок проверок, если это необходимо;
- так как одни и те же проверки разные люди могут проходить по-разному, то в некоторой степени можно 
избавиться от «`эффекта пестицида`».
Чек-листы хорошо использовать на начальном этапе тестирования. Накидать начальный список проверок и 
потом, при необходимости, детализировать займет не так много времени, как написание полноценных 
тест-кейсов.

Также можно использовать смешанную документацию. Для простого функционала чек-листы, а для более 
сложного полноценные тест-кейсы. 

Для хранения и прохождения чек-листов есть инструменты, как и для тест-кейсов.

Список нескольких популярных:

- TestRail, TestLink — и прочие системы управления тестированием;
- Jira;
- Trello;
- Гугл Таблице — при правильной настройке, можно сделать довольно удобную систему прохождения 
чек-листов и сбора информации для отчетности. Главное преимущество — это бесплатно;
- Sitechco — бесплатная программа, в которой можно попрактиковаться в создании и прохождении чек-листов.

----------------------------------------------------------------------------------------------------
# Баг - репорт

<!--i ["баг-репорт"]-->
**Баг-репорт** - это документ, в котором описана последовательность шагов, приводящая к неверному 
поведению функционала, а также описан ожидаемый результат. 

У *баг - репорта* есть атрибуты. Часть из них обязательна для заполнения, часть - не обязательна.

- `ID` — обязательный атрибут. Это номер баг-репорта. В большинстве случаев, автоматически создается 
    баг-трекинговой системой.
- `Заголовок` — обязательный атрибут. С помощью одного предложения описывается суть бага. Для 
    написания заголовка используют вопросы `“Что? Где? Когда?”`. Эти вопросы помогают написать понятный 
    для всех членов команды заголовок, не слишком длинный, но отражающий суть бага. 
- `Шаги`  — обязательный атрибут. Здесь описывается последовательность действий, которые необходимо 
    выполнить для воспроизведения бага. На этом этапе указывается минимум необходимых действий.
- `Фактический результат` — обязательный атрибут. Описывается полученный результат после выполнения 
    описанных шагов.
- `Ожидаемый результат` — обязательный атрибут. Описывается результат, который мы ожидали увидеть 
    после выполнения указанных шагов.
- `Серьезность` — обязательный атрибут. Указывается уровень серьезности бага и насколько это критично 
    влияет на общую функциональность тестируемого продукта.
- `Приоритет` — необязательный атрибут. Указывается очередность исправления бага.
- `Скриншот или видео` — обязательный атрибут. Видео или скриншот должны четко демонстрировать баг. 
    Можно сделать выделение бага, сделать короткие поясняющие надписи, если это необходимо.
- `Тип бага` — необязательный атрибут. Исходя из этой информации, можно составить отчет и провести 
    анализ о слабых местах в продукте, чтобы потом их исправить.
- `Статус` — необязательный атрибут. Указывается статус бага в его “жизненном цикле”.
- `Требование` — необязательный атрибут. Указывается ссылка на требование, в котором прописано 
    ожидаемое поведение. При наличии такого документа, можно избежать споров (если возникнут) баг или 
    фича. 
- `Дополнительная информация` — необязательный атрибут. Дополнительной информацией может быть файл с 
    тестовыми данными, данные для авторизации (тестовый логин и пароль) и т.д.
- `Окружение` — необязательный атрибут. Если нужно, то можно указать версию браузера, операционную 
    систему и т.д.
- `Автор` — необязательный атрибут. Указывается тестировщик, который обнаружил и создал баг-репорт. 
    У разработчиков могут возникнуть дополнительные вопросы и так будет понятно, к кому надо обратиться.
- `Исполнитель` — необязательный атрибут. Указывается человек, который продолжит работу над 
    исправлением бага.
- `Версия обнаружения` — необязательный атрибут. Указывается версия продукта, в которой был 
    обнаружен баг.
- `Комментарии` — необязательный атрибут. В комментариях происходит обсуждение бага после создания 
    баг-репорта. 


<!--i ["приоритеты багов"]-->
## Приоритеты багов

Степени “серьезности” и “приоритета”.

- *Блокирующий* `(Blocker`) —  этот уровень выставляется, когда из-за описанного бага продукт совсем 
не работает. Например, на нашем сайте с рецептами открывается главная страница и зависает, не 
реагирует на клики и другие действия.
- *Критический* (`Critical`) — этот уровень указывается, когда описанный баг влияет на главный  
функционал. Например, для нашего сайта критическим функционалом будет создание и публикация рецепта. 
Если у пользователей не будет возможности создавать и публиковать свои рецепты, то он может уйти на 
другой работающий сайт.
- *Серьезный* (`Major`) — этот уровень выставляется, когда баг создает неудобства, но не влияет на 
критический функционал. Например, у вновь созданного и опубликованного рецепта не появляется плашка 
“Новый”.
- *Незначительный* (`Minor`) — этот уровень указывается для бага, который не влияет на “логику” 
приложения. Чаще всего это баги, возникающие при верстке, локализации и т.д. Например, цвет шрифта 
всех кнопок должен быть темно-синий (согласно макету), а разработчики забыли про одну кнопку и 
сделали ее с зеленым шрифтом.
- *Тривиальный* (`Trivial`) — баги этого уровня не влияют на работу и качество продукта. Такие баги 
не исправляют специально, а обычно делают правку в ходе реализации функционала, который находится 
рядом. Например, на нашем сайте в футере отображается прошедший год.

Серьезность в баг-репорте выставляет тестировщик. А вот приоритет выставляется руководителем или 
менеджером проекта.

Уровни приоритета также могут различаться в разных компаниях. 

- **Высокий (High)** —  баг с таким статусом, будет исправляться в первую очередь.
- **Средний (Medium)** —  баг будет исправляться после всех багов с высоким статусом.
- **Низкий (Low)** —  баг будет исправляться в последнюю очередь, когда все ошибки более высокого 
    приоритета будут исправлены.


<!--i ["жизненный цикл бага"]-->
## "Жизненный цикл" бага

Жизненный цикл бага (bug workflow) – последовательность этапов, которые проходит баг на своём пути 
с момента его создания до окончательного закрытия. Для лучшего восприятия изображается в виде схемы 
с возможными статусами и действиями, которые приводят к смене этих статусов.

- Новый —  баг найден и при создании баг-репорта в системе, этот статус устанавливается автоматически. 
- Отклонен —  если баг был уже ранее внесен или не будет правиться по каким-либо причинам или не 
воспроизводится больше, то руководителем команды может быть выставлен данный статус. Далее можно или 
переоткрыть (с новыми доказательствами и доводами, что это баг), или закрыть.
- Открыт — устанавливается после проверки руководителем и принятии решения об исправлении. Может 
быть переведен в статус Отсрочен, Исправлен или Отклонен. 
- Отсрочен —  если нет необходимость исправлять данный баг в данной итерации. В последующих 
итерациях может быть переведен в Открыт или Закрыт.
- Исправлен —  статус выставляется после исправления бага разработчиков и перевод его на проверку 
тестировщику. Может быть Повторно открыт или Закрыт.
- Повторно открыт —  статус означает, что при проверке исправления, проблема все еще воспроизводится. 
Можно перевести в статус Исправлен, Отсрочен или Отклонен.
- Закрыт - баг исправлен и не воспроизводится.

Помимо вышеуказанных основных статусов могут также дополнительно использоваться резолюции, например:

- Назначен на
- Требуется дополнительная информация
- В процессе исправления
- Не может быть воспроизведён
- На регрессионное тестирование.

Существует ряд негласных требований к баг репортам, а именно:

- Отчёт позволяет понять, в чём именно состоит проблема и какова её важность для продукта в целом;
- Изложенное описание позволяет непосредственно воспроизвести эту проблему.
 
Также можно сформулировать следующие основные действия после обнаружения ошибки в работе ПО:

- Проверить, чётко ли выполнены все предусловия (используется ли нужное окружение, например);
- Дополнительно обратить внимание на правильность версии продукта, в которой проводите тестирование;
- Воспроизвести ошибку повторно минимум один раз, а лучше несколько;
- Поискать среди имеющихся отчётов  об ошибках нет ли ранее внесенного репорта о найденной Вами сейчас;
- Не откладывать документирование обнаруженной проблемы, создавать отчёт непосредственно после обнаружения ошибки;
- Изучить смежный функционал в поисках имеющихся дополнительных багов.


### Пример баг-репорта

№ 1. Нет данных в результате выборки фильтра при указании данных за год

- Статус: Новый
- Окружение: Win 10, Google Chrome Версия 100.0.4896.75 (Официальная сборка), (64 бит)
- Серьезность: Серьезный (Major) 
- Предусловие: в базе должны быть созданы рецепты до 2021 г, в 2021 г и после 2021 г.
Шаги:
- Открыть главную страницу: resept_test_site.ru.
- В блоке “Фильтр” заполнить поля дат значениями: “01.01.2021”, “31.12.2021”.
- Нажать кнопку “Выбрать”.
- Ожидаемый результат:
-Пользователь видит результат выборки - все рецепты созданные за 2021 г.
- Фактический результат:
- Пользователь видит пустой результат выборки - нет ни одного рецепта.
- Cкрин_ошибки.jpg


## Локализация багов

- это 2021 год проблемный;
- возможно, фильтр не работает совсем;
- визуально кнопки фильтра могут быть одинаковые на всех страницах сайта, но на главной может 
- отличаться реализация и вот она как раз и сломалась.

После локализации, возможно придется отредактировать баг-репорт или вообще переписать его.  
Поэтому лучше найти границы проблемы до написания баг-репорта.


## Инструменты для управления дефектами.

Чаще всего можно услышать название для таких инструментов как ~“баг-трекинговая система”`.

Такие системы используются в процессе разработки продукта, для документации багов, а также 
предложений для улучшения. В этих системах удобно получать данные  для анализа о процессе исправления ошибок и выполненных улучшений.

Список из наиболее известных:

- Atlassian JIRA
- Redmine
- Mantis
Для тренировки можно воспользоваться Гугл Таблицей. 

Алгоритм написания баг-репорта:

- Проверить, что баг воспроизводится 2-3 раза;
- Локализовать проблему;
- Проверить, что вы не создадите дубликат в системе управления дефектами;
- Написать заголовок (должен отвечать на вопросы “что? где? когда?”);
- Заполнить обязательные поля отчета;
- Заполнить необходимые необязательные поля отчета
- Перечитать баг-репорт;
- Пройти написанные шаги и проверить, что все понятно, ссылки корректны;
- Сохранить отчет;
- Назначить отчет либо на разработчика функционала, либо на руководителя.

Частые ошибки начинающих тестировщиков:

- В заголовке не используется правило трех вопросов;
- Присутствует лишняя информация в заголовке (окружения, учетные данные пользователей, версия и т.д.);
- Нет шагов для воспроизведения бага;
- Описано слишком много лишних шагов для воспроизведения;
- Пропущено описание фактического и / или ожидаемого результата;
- Нет обоснования почему это баг;
- Отсутствует скриншот / видео бага или на нем нет фиксации бага.

----------------------------------------------------------------------------------------------------
<!--i ["отчета о тестировании"]-->
# Отчет о тестировании

Содержание отчета о тестировании:

- Отчет составляется по шаблону предоставленному заказчиком. Если же шаблона нет, а отчет нужен, то 
    можно придерживаться следующего списка:

- Информация о проекте — краткое описание содержания отчета. Например, название проекта, тестируемая 
    версия и т.д.;

- Команда тестировщиков — список людей, которые задействованы в тестировании. Если был один человек, 
    то можно опустить этот пункт;

- Описание процесса тестирования — какие использовались техники, методы и инструменты;

- Краткое описание результатов — что было протестировано (версия, номер сборки); что тормозит процесс 
    тестирования (критичные дефекты, недоработанная функциональность, пробелы в требованиях);

- Расписание — временные сроки тестирования функционала;

- Статистика по багам — баги, обнаруженные за отчетный период, степень их важности и срочности.

- Список новых багов — список багов, впервые обнаруженных в данном отчетном периоде.

- Список устраненных дефектов — список багов, исправленных разработчиками в отчетном периоде.

- Рекомендации — выводы по результатам тестирования и рекомендации по повышению его эффективности в 
    будущем. 

- Приложения — графики, таблицы, диаграммы, демонстрирующие числовые характеристики процесса 
    тестирования.
















