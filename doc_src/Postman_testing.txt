<!--VARIABLES {"title": "Postman", "SORT_ORDER": "33"}-->

[TOC]

----------------------------------------------------------------------------------------------------
# Postman

<!--i ["Postman"]--> 
Postman --- позволяет проектировать дизайн `API` и создавать на его основе `Mock-сервер`.
Основное назначение `Postman` - облегчить разработку, тестирование и документирование API. С его 
помощью можно отправить данные в запросе и проверить полученный ответ. Можно например сохранять 
запросы в папки и коллекции, удобно параметризовывать запросы. Запускать коллекции с помощью 
`Collection Runner` и использовать их как автоматизированные тесты.

Тестировщики, с помощью Postman могут отправлять *HTTP/HTTPS* запросы к сервисам и получать ответы 
от них. С помощью такого подхода можно протестировать бэкенд сервисы и убедиться, что они работают 
корректно. С помощью Postman можно выполнять запросы к различным API, таким как *REST*, *SOAP* и 
*GraphQL*.

----------------------------------------------------------------------------------------------------

# REST API

Для отправки и получения тех самых запросов (функций) и в зависимости от назначения API следует 
разным протоколам и стандартам.

REST API — репрезентативная передача состояния (REST) — это архитектурный стиль, который 
осуществляет реализацию клиента и сервера независимо друг от друга. Сервисы в REST API 
взаимодействуют по протоколу HTTP.

REST или Representational state transfer, что переводится как передача состояния представления — 
это архитектурный стиль проектирования API с использованием протокола HTTP. Главное преимущество 
REST — большая гибкость.

REST API применяется везде, где есть необходимость предоставления данных с сервера пользователю 
веб-приложения или сайта.

**Главными компонентами REST API** являются:

**Client** — клиент или программа, которая запущена на стороне пользователя (на его девайсе) и 
инициирует коммуникацию.

**Server** — сервер, который предоставляет API в качестве доступа к своим данным и функциям.

**Resource** — ресурс представляет собой любой вид контента (видео, текст, картинка), который 
сервер может передать клиенту.

Как работает REST API














